"""
题目描述：
给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​
设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。

示例：
输入: [1,2,3,0,2]
输出: 3 
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]

解题思路：
穷举所有状态即可；和“买卖股票的最佳时机”不同点在于存在冷冻期，所以需要一个额外的变量记录第 i-2 天的情况；
最后更新一下状态转移方程即可。
"""
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        
        dp_i_0 = 0 # 第0天未持有股票
        dp_i_1 = -1e10 # 第0天已经持有股票是不可能的，设置为负无穷
        dp_pre_0 = 0 # 代表 dp[i-2][0]: 记录第 i-2 天的情况（因为存在冷冻期=1天）
        for p in prices:
            tmp = dp_i_0
            dp_i_0 = max(dp_i_0, dp_i_1 + p)
            dp_i_1 = max(dp_i_1, dp_pre_0 - p)
            dp_pre_0 = tmp

        return dp_i_0
