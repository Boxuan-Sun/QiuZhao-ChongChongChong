"""
给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。

示例 1:
输入: n = 12
输出: 3 
解释: 12 = 4 + 4 + 4.

示例 2:
输入: n = 13
输出: 2
解释: 13 = 4 + 9.

解题思路：
类似于凑硬币问题（要求硬币数量最小），借助之前的搜索结果，从小到大 一点一点扩大搜索范围
定义 dp：dp[i] 表示数字 i 需要的完全平方数的最小个数
动态转移方程为：dp[i] = MIN(dp[i], dp[i - j * j] + 1)，i表示当前数字，j*j表示平方数
时间复杂度：O(n*sqrt(n))，sqrt为平方根
"""
class Solution:
    def numSquares(self, n: int) -> int:

        dp = [0] * (n + 1)
        # 类似于凑硬币问题（要求硬币数量最小），借助之前的搜索结果，从小到大 一点一点扩大搜索范围
        for i in range(1, n+1):
            dp[i] = i # 初始化
            mid = int(i**0.5) + 1
            for j in range(mid): # 每一个数字 j 都有选与不选两种选择
                dp[i] = min(dp[i], dp[i - j*j] + 1)
        print('dp:', dp)
        return dp[n]
