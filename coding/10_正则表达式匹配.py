"""
给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。
'.' 匹配任意单个字符
'*' 匹配零个或多个前面的那一个元素
所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。

说明:
s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。

示例 1:
输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。

示例 2:
输入:
s = "aa"
p = "a*"
输出: true
解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。

示例 3:
输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。

示例 4:
输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。

示例 5:
输入:
s = "mississippi"
p = "mis*is*p*."
输出: false

解题思路：
带有备忘录的递归，减少重复查找。
dp(i, j) 表示字符s和模式p当前匹配到的位置
对于p中某一个位置j的字符 c 后面出现了 * 字符，有两种处理方法：
（1）跳过模式p中的c和后面的*字符
（2）c和字符串s当前i位置对应的字符相等，且递归判断s的i+1位置和p的j位置（因为j+1是*，代表可以匹配0-∞次p[j]）

对于 . 字符，可以匹配任意一个字符，处理时会非常方便
"""
lass Solution:
    def isMatch(self, s: str, p: str) -> bool:

        mymemo = {} # 存放备忘录
        def dp(i, j):
            if (i, j) in mymemo:
                return mymemo[(i, j)]
            if j == len(p):
                return i == len(s)
            first = i < len(s) and p[j] in [s[i], '.']
            if j <= len(p) - 2 and p[j+1] == '*': # 出现了 *
                # 当前递归结果用ans保存，并存放到备忘录中！
                # 第一项：跳过当前字符和后面的*字符
                ans = dp(i, j+2) or \
                    (first and dp(i+1, j)) # 往s中的下一个字符进行递归判断
            else:
                # 当前递归结果用ans保存，并存放到备忘录中！
                ans = first and dp(i+1, j+1)
            mymemo[(i, j)] = ans
            return ans
        
        return dp(0, 0)
